//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace iBand.DAL
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class PayitMerchantsnWalletsEntities : DbContext
    {
        public PayitMerchantsnWalletsEntities()
            : base("name=PayitMerchantsnWalletsEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Category> Categories { get; set; }
        public virtual DbSet<CustomerDevice> CustomerDevices { get; set; }
        public virtual DbSet<CustomerMobileNoHistory> CustomerMobileNoHistories { get; set; }
        public virtual DbSet<CustomerOTP_SMSs> CustomerOTP_SMSs { get; set; }
        public virtual DbSet<CustomerOTP> CustomerOTPs { get; set; }
        public virtual DbSet<Customer> Customers { get; set; }
        public virtual DbSet<CustomerWallet> CustomerWallets { get; set; }
        public virtual DbSet<CustomerWalletTransaction> CustomerWalletTransactions { get; set; }
        public virtual DbSet<CustomerWalletTransactionsCredit> CustomerWalletTransactionsCredits { get; set; }
        public virtual DbSet<CustomerWalletTransactionsDebit> CustomerWalletTransactionsDebits { get; set; }
        public virtual DbSet<LoyaltyCardCompany> LoyaltyCardCompanies { get; set; }
        public virtual DbSet<LoyaltyCardType> LoyaltyCardTypes { get; set; }
        public virtual DbSet<LoyaltyCustomerCard> LoyaltyCustomerCards { get; set; }
        public virtual DbSet<MerchantCategory> MerchantCategories { get; set; }
        public virtual DbSet<MerchantCustomerRequest> MerchantCustomerRequests { get; set; }
        public virtual DbSet<MerchantInvoice> MerchantInvoices { get; set; }
        public virtual DbSet<MerchantItemImage> MerchantItemImages { get; set; }
        public virtual DbSet<MerchantItem> MerchantItems { get; set; }
        public virtual DbSet<MerchantOrderItem> MerchantOrderItems { get; set; }
        public virtual DbSet<MerchantOrder> MerchantOrders { get; set; }
        public virtual DbSet<MerchantRequest> MerchantRequests { get; set; }
        public virtual DbSet<Merchant> Merchants { get; set; }
        public virtual DbSet<MerchantTransaction> MerchantTransactions { get; set; }
        public virtual DbSet<MerchantUserCategory> MerchantUserCategories { get; set; }
        public virtual DbSet<MerchantUser> MerchantUsers { get; set; }
        public virtual DbSet<MyPaymentService> MyPaymentServices { get; set; }
        public virtual DbSet<NewLoyaltyCard> NewLoyaltyCards { get; set; }
        public virtual DbSet<PayitiSY> PayitiSYS { get; set; }
        public virtual DbSet<ThirdParty> ThirdParties { get; set; }
        public virtual DbSet<ThirdParty_knet_trans> ThirdParty_knet_trans { get; set; }
        public virtual DbSet<ThirdPartyAppPrivilege> ThirdPartyAppPrivileges { get; set; }
        public virtual DbSet<ThirdPartyApp> ThirdPartyApps { get; set; }
        public virtual DbSet<ThirdPartyPrivilege> ThirdPartyPrivileges { get; set; }
        public virtual DbSet<UsersNWalletPrivilege> UsersNWalletPrivileges { get; set; }
        public virtual DbSet<WalletImage> WalletImages { get; set; }
        public virtual DbSet<WalletService> WalletServices { get; set; }
    
        public virtual ObjectResult<MerchantWalletBalanceHistory_Result> MerchantWalletBalanceHistory(Nullable<int> merchantID, Nullable<int> merchantUserID)
        {
            var merchantIDParameter = merchantID.HasValue ?
                new ObjectParameter("MerchantID", merchantID) :
                new ObjectParameter("MerchantID", typeof(int));
    
            var merchantUserIDParameter = merchantUserID.HasValue ?
                new ObjectParameter("MerchantUserID", merchantUserID) :
                new ObjectParameter("MerchantUserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MerchantWalletBalanceHistory_Result>("MerchantWalletBalanceHistory", merchantIDParameter, merchantUserIDParameter);
        }
    
        public virtual ObjectResult<Sp_CustomerDevices_Result> Sp_CustomerDevices(string mobilenumber, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var mobilenumberParameter = mobilenumber != null ?
                new ObjectParameter("Mobilenumber", mobilenumber) :
                new ObjectParameter("Mobilenumber", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_CustomerDevices_Result>("Sp_CustomerDevices", mobilenumberParameter, startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<Sp_CustomerHistory_Result> Sp_CustomerHistory(string mobilenumber, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var mobilenumberParameter = mobilenumber != null ?
                new ObjectParameter("Mobilenumber", mobilenumber) :
                new ObjectParameter("Mobilenumber", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_CustomerHistory_Result>("Sp_CustomerHistory", mobilenumberParameter, startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<Sp_CustomerOTPs_Result> Sp_CustomerOTPs(string mobilenumber, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<bool> isused)
        {
            var mobilenumberParameter = mobilenumber != null ?
                new ObjectParameter("Mobilenumber", mobilenumber) :
                new ObjectParameter("Mobilenumber", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            var isusedParameter = isused.HasValue ?
                new ObjectParameter("Isused", isused) :
                new ObjectParameter("Isused", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_CustomerOTPs_Result>("Sp_CustomerOTPs", mobilenumberParameter, startDateParameter, endDateParameter, isusedParameter);
        }
    
        public virtual ObjectResult<Sp_CustomerRequests_Result> Sp_CustomerRequests(Nullable<int> roleid, Nullable<int> merchantid)
        {
            var roleidParameter = roleid.HasValue ?
                new ObjectParameter("roleid", roleid) :
                new ObjectParameter("roleid", typeof(int));
    
            var merchantidParameter = merchantid.HasValue ?
                new ObjectParameter("merchantid", merchantid) :
                new ObjectParameter("merchantid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_CustomerRequests_Result>("Sp_CustomerRequests", roleidParameter, merchantidParameter);
        }
    
        public virtual ObjectResult<Sp_Customers_Result> Sp_Customers(string mobilenumber, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<bool> isActivated)
        {
            var mobilenumberParameter = mobilenumber != null ?
                new ObjectParameter("Mobilenumber", mobilenumber) :
                new ObjectParameter("Mobilenumber", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            var isActivatedParameter = isActivated.HasValue ?
                new ObjectParameter("IsActivated", isActivated) :
                new ObjectParameter("IsActivated", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_Customers_Result>("Sp_Customers", mobilenumberParameter, startDateParameter, endDateParameter, isActivatedParameter);
        }
    
        public virtual ObjectResult<Sp_CustomerTransactions_Result> Sp_CustomerTransactions(string mobilenumber, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var mobilenumberParameter = mobilenumber != null ?
                new ObjectParameter("Mobilenumber", mobilenumber) :
                new ObjectParameter("Mobilenumber", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_CustomerTransactions_Result>("Sp_CustomerTransactions", mobilenumberParameter, startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<Sp_CustomerWallets_Result> Sp_CustomerWallets(string mobilenumber, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var mobilenumberParameter = mobilenumber != null ?
                new ObjectParameter("Mobilenumber", mobilenumber) :
                new ObjectParameter("Mobilenumber", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_CustomerWallets_Result>("Sp_CustomerWallets", mobilenumberParameter, startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<Sp_GetPaymentInvoices_Result> Sp_GetPaymentInvoices(Nullable<int> merchantID, Nullable<double> amount, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<bool> isSettled)
        {
            var merchantIDParameter = merchantID.HasValue ?
                new ObjectParameter("MerchantID", merchantID) :
                new ObjectParameter("MerchantID", typeof(int));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(double));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var isSettledParameter = isSettled.HasValue ?
                new ObjectParameter("IsSettled", isSettled) :
                new ObjectParameter("IsSettled", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_GetPaymentInvoices_Result>("Sp_GetPaymentInvoices", merchantIDParameter, amountParameter, startDateParameter, endDateParameter, isSettledParameter);
        }
    
        public virtual ObjectResult<Sp_MerchantWallets_Result> Sp_MerchantWallets(Nullable<int> merchantID)
        {
            var merchantIDParameter = merchantID.HasValue ?
                new ObjectParameter("MerchantID", merchantID) :
                new ObjectParameter("MerchantID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_MerchantWallets_Result>("Sp_MerchantWallets", merchantIDParameter);
        }
    }
}
