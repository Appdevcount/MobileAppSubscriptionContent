//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace iBand.DAL
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class iBandEntities : DbContext
    {
        public iBandEntities()
            : base("name=iBandEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Album> Albums { get; set; }
        public virtual DbSet<Artist> Artists { get; set; }
        public virtual DbSet<BillingPayment> BillingPayments { get; set; }
        public virtual DbSet<BillingPaymentsConfiguration> BillingPaymentsConfigurations { get; set; }
        public virtual DbSet<Category> Categories { get; set; }
        public virtual DbSet<Company> Companies { get; set; }
        public virtual DbSet<Contestant> Contestants { get; set; }
        public virtual DbSet<ContestantsReports_Day> ContestantsReports_Day { get; set; }
        public virtual DbSet<ContestantsReports_Hour> ContestantsReports_Hour { get; set; }
        public virtual DbSet<ContestantsReports_Month> ContestantsReports_Month { get; set; }
        public virtual DbSet<ContestantsReports_Year> ContestantsReports_Year { get; set; }
        public virtual DbSet<Country> Countries { get; set; }
        public virtual DbSet<InteractiveServiceConfig> InteractiveServiceConfigs { get; set; }
        public virtual DbSet<InteractiveServiceContestant> InteractiveServiceContestants { get; set; }
        public virtual DbSet<InteractiveServiceContestantsVote> InteractiveServiceContestantsVotes { get; set; }
        public virtual DbSet<InteractiveService> InteractiveServices { get; set; }
        public virtual DbSet<InteractiveServiceUserMessage> InteractiveServiceUserMessages { get; set; }
        public virtual DbSet<MetaMaster> MetaMasters { get; set; }
        public virtual DbSet<Operator> Operators { get; set; }
        public virtual DbSet<RBT> RBTs { get; set; }
        public virtual DbSet<RBTMeta> RBTMetas { get; set; }
        public virtual DbSet<Service> Services { get; set; }
        public virtual DbSet<ServicesConfig> ServicesConfigs { get; set; }
        public virtual DbSet<SubCategory> SubCategories { get; set; }
        public virtual DbSet<Subs_Billing> Subs_Billing { get; set; }
        public virtual DbSet<Subs_BillingHistory> Subs_BillingHistory { get; set; }
        public virtual DbSet<Subs_ContentData> Subs_ContentData { get; set; }
        public virtual DbSet<Subs_ContentDelivery> Subs_ContentDelivery { get; set; }
        public virtual DbSet<Subs_ContentGroupConfig> Subs_ContentGroupConfig { get; set; }
        public virtual DbSet<Subs_ContentGroups> Subs_ContentGroups { get; set; }
        public virtual DbSet<Subs_ContentOwners> Subs_ContentOwners { get; set; }
        public virtual DbSet<Subs_ServiceChannelContentConfig> Subs_ServiceChannelContentConfig { get; set; }
        public virtual DbSet<Subs_ServiceChannelContentForCountry> Subs_ServiceChannelContentForCountry { get; set; }
        public virtual DbSet<Subs_ServiceChannels> Subs_ServiceChannels { get; set; }
        public virtual DbSet<Subs_Services> Subs_Services { get; set; }
        public virtual DbSet<Subs_UserServiceChannels> Subs_UserServiceChannels { get; set; }
        public virtual DbSet<Subs_UserSubscriptions> Subs_UserSubscriptions { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<Tbl_Action_Privileges> Tbl_Action_Privileges { get; set; }
        public virtual DbSet<Tbl_Menu_Master> Tbl_Menu_Master { get; set; }
        public virtual DbSet<TBL_Roles_Previleges> TBL_Roles_Previleges { get; set; }
        public virtual DbSet<Tbl_User_Master> Tbl_User_Master { get; set; }
        public virtual DbSet<TempTone> TempTones { get; set; }
        public virtual DbSet<Tone> Tones { get; set; }
        public virtual DbSet<Translation> Translations { get; set; }
        public virtual DbSet<TVChannel> TVChannels { get; set; }
        public virtual DbSet<UserFavourite> UserFavourites { get; set; }
        public virtual DbSet<UserOperator> UserOperators { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<UserWallet> UserWallets { get; set; }
        public virtual DbSet<Tbl_Role_Master> Tbl_Role_Master { get; set; }
    
        public virtual int MetaDataManagement()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MetaDataManagement");
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual ObjectResult<USP_Get_Action_Privileges_Result> USP_Get_Action_Privileges(Nullable<int> iRoleId)
        {
            var iRoleIdParameter = iRoleId.HasValue ?
                new ObjectParameter("iRoleId", iRoleId) :
                new ObjectParameter("iRoleId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_Get_Action_Privileges_Result>("USP_Get_Action_Privileges", iRoleIdParameter);
        }
    
        public virtual int USP_Get_Role_Privileges()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_Get_Role_Privileges");
        }
    
        public virtual int USP_Save_Action_Privileges(Nullable<int> iRoleId, Nullable<int> iMenuId, string vAction, Nullable<bool> bChecked, Nullable<int> iUpdatedBy)
        {
            var iRoleIdParameter = iRoleId.HasValue ?
                new ObjectParameter("iRoleId", iRoleId) :
                new ObjectParameter("iRoleId", typeof(int));
    
            var iMenuIdParameter = iMenuId.HasValue ?
                new ObjectParameter("iMenuId", iMenuId) :
                new ObjectParameter("iMenuId", typeof(int));
    
            var vActionParameter = vAction != null ?
                new ObjectParameter("vAction", vAction) :
                new ObjectParameter("vAction", typeof(string));
    
            var bCheckedParameter = bChecked.HasValue ?
                new ObjectParameter("bChecked", bChecked) :
                new ObjectParameter("bChecked", typeof(bool));
    
            var iUpdatedByParameter = iUpdatedBy.HasValue ?
                new ObjectParameter("iUpdatedBy", iUpdatedBy) :
                new ObjectParameter("iUpdatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_Save_Action_Privileges", iRoleIdParameter, iMenuIdParameter, vActionParameter, bCheckedParameter, iUpdatedByParameter);
        }
    
        public virtual int USP_Save_Role_Privileges(Nullable<int> iRoleId, Nullable<int> iMenuId, string vHasAccess, Nullable<int> iUpdatedBy)
        {
            var iRoleIdParameter = iRoleId.HasValue ?
                new ObjectParameter("iRoleId", iRoleId) :
                new ObjectParameter("iRoleId", typeof(int));
    
            var iMenuIdParameter = iMenuId.HasValue ?
                new ObjectParameter("iMenuId", iMenuId) :
                new ObjectParameter("iMenuId", typeof(int));
    
            var vHasAccessParameter = vHasAccess != null ?
                new ObjectParameter("vHasAccess", vHasAccess) :
                new ObjectParameter("vHasAccess", typeof(string));
    
            var iUpdatedByParameter = iUpdatedBy.HasValue ?
                new ObjectParameter("iUpdatedBy", iUpdatedBy) :
                new ObjectParameter("iUpdatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_Save_Role_Privileges", iRoleIdParameter, iMenuIdParameter, vHasAccessParameter, iUpdatedByParameter);
        }
    }
}
